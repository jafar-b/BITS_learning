import React, { createContext, useContext, useReducer, useCallback, useMemo, useState } from "react";

// Task Type
interface Task {
  id: number;
  text: string;
  completed: boolean;
}

// Actions
type Action =
  | { type: "ADD_TASK"; text: string }
  | { type: "REMOVE_TASK"; id: number }
  | { type: "TOGGLE_TASK"; id: number };

// Task Context Type
interface TaskContextType {
  tasks: Task[];
  addTask: (text: string) => void;
  removeTask: (id: number) => void;
  toggleTask: (id: number) => void;
}

// Reducer Function
const taskReducer = (state: Task[], action: Action): Task[] => {
  switch (action.type) {
    case "ADD_TASK":
      return [...state, { id: Date.now(), text: action.text, completed: false }];
    case "REMOVE_TASK":
      return state.filter((task) => task.id !== action.id);
    case "TOGGLE_TASK":
      return state.map((task) =>
        task.id === action.id ? { ...task, completed: !task.completed } : task
      );
    default:
      return state;
  }
};

// Create Context
const TaskContext = createContext<TaskContextType | null>(null);

// Provider Component
export const TaskProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [tasks, dispatch] = useReducer(taskReducer, []);

  const addTask = useCallback((text: string) => dispatch({ type: "ADD_TASK", text }), []);
  const removeTask = useCallback((id: number) => dispatch({ type: "REMOVE_TASK", id }), []);
  const toggleTask = useCallback((id: number) => dispatch({ type: "TOGGLE_TASK", id }), []);

  return (
    <TaskContext.Provider value={{ tasks, addTask, removeTask, toggleTask }}>
      {children}
    </TaskContext.Provider>
  );
};

// Custom Hook
export const useTasks = (): TaskContextType => {
  const context = useContext(TaskContext);
  if (!context) {
    throw new Error("useTasks must be used within a TaskProvider");
  }
  return context;
};

// Task List Component
const TaskList: React.FC = () => {
  const { tasks, addTask, removeTask, toggleTask } = useTasks();
  const [taskText, setTaskText] = useState("");

  // useMemo to count completed tasks
  const completedTasks = useMemo(() => tasks.filter((task) => task.completed).length, [tasks]);

  return (
    <div>
      <input value={taskText} onChange={(e) => setTaskText(e.target.value)} />
      <button onClick={() => { addTask(taskText); setTaskText(""); }}>Add</button>
      <p>Completed Tasks: {completedTasks}</p>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            <span onClick={() => toggleTask(task.id)}
              style={{ textDecoration: task.completed ? "line-through" : "none", cursor: "pointer" }}>
              {task.text}
            </span>
            <button onClick={() => removeTask(task.id)}>X</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

// App Component
const App: React.FC = () => (
  <TaskProvider>
    <TaskList />
  </TaskProvider>
);

export default App;
